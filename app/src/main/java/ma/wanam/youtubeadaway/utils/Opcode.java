package ma.wanam.youtubeadaway.utils;

public enum Opcode
{
    NOP(0x00, "nop"),
    MOVE(0x01, "move"),
    MOVE_FROM16(0x02, "move/from16"),
    MOVE_16(0x03, "move/16"),
    MOVE_WIDE(0x04, "move-wide"),
    MOVE_WIDE_FROM16(0x05, "move-wide/from16"),
    MOVE_WIDE_16(0x06, "move-wide/16"),
    MOVE_OBJECT(0x07, "move-object"),
    MOVE_OBJECT_FROM16(0x08, "move-object/from16"),
    MOVE_OBJECT_16(0x09, "move-object/16"),
    MOVE_RESULT(0x0a, "move-result"),
    MOVE_RESULT_WIDE(0x0b, "move-result-wide"),
    MOVE_RESULT_OBJECT(0x0c, "move-result-object"),
    MOVE_EXCEPTION(0x0d, "move-exception"),
    RETURN_VOID(0x0e, "return-void"),
    RETURN(0x0f, "return"),
    RETURN_WIDE(0x10, "return-wide"),
    RETURN_OBJECT(0x11, "return-object"),
    CONST_4(0x12, "const/4"),
    CONST_16(0x13, "const/16"),
    CONST(0x14, "const"),
    CONST_HIGH16(0x15, "const/high16"),
    CONST_WIDE_16(0x16, "const-wide/16"),
    CONST_WIDE_32(0x17, "const-wide/32"),
    CONST_WIDE(0x18, "const-wide"),
    CONST_WIDE_HIGH16(0x19, "const-wide/high16"),
    CONST_STRING(0x1a, "const-string"),
    CONST_STRING_JUMBO(0x1b, "const-string/jumbo"),
    CONST_CLASS(0x1c, "const-class"),
    MONITOR_ENTER(0x1d, "monitor-enter"),
    MONITOR_EXIT(0x1e, "monitor-exit"),
    CHECK_CAST(0x1f, "check-cast"),
    INSTANCE_OF(0x20, "instance-of"),
    ARRAY_LENGTH(0x21, "array-length"),
    NEW_INSTANCE(0x22, "new-instance"),
    NEW_ARRAY(0x23, "new-array"),
    FILLED_NEW_ARRAY(0x24, "filled-new-array"),
    FILLED_NEW_ARRAY_RANGE(0x25, "filled-new-array/range"),
    FILL_ARRAY_DATA(0x26, "fill-array-data"),
    THROW(0x27, "throw"),
    GOTO(0x28, "goto"),
    GOTO_16(0x29, "goto/16"),
    GOTO_32(0x2a, "goto/32"),
    PACKED_SWITCH(0x2b, "packed-switch"),
    SPARSE_SWITCH(0x2c, "sparse-switch"),
    CMPL_FLOAT(0x2d, "cmpl-float"),
    CMPG_FLOAT(0x2e, "cmpg-float"),
    CMPL_DOUBLE(0x2f, "cmpl-double"),
    CMPG_DOUBLE(0x30, "cmpg-double"),
    CMP_LONG(0x31, "cmp-long"),
    IF_EQ(0x32, "if-eq"),
    IF_NE(0x33, "if-ne"),
    IF_LT(0x34, "if-lt"),
    IF_GE(0x35, "if-ge"),
    IF_GT(0x36, "if-gt"),
    IF_LE(0x37, "if-le"),
    IF_EQZ(0x38, "if-eqz"),
    IF_NEZ(0x39, "if-nez"),
    IF_LTZ(0x3a, "if-ltz"),
    IF_GEZ(0x3b, "if-gez"),
    IF_GTZ(0x3c, "if-gtz"),
    IF_LEZ(0x3d, "if-lez"),
    AGET(0x44, "aget"),
    AGET_WIDE(0x45, "aget-wide"),
    AGET_OBJECT(0x46, "aget-object"),
    AGET_BOOLEAN(0x47, "aget-boolean"),
    AGET_BYTE(0x48, "aget-byte"),
    AGET_CHAR(0x49, "aget-char"),
    AGET_SHORT(0x4a, "aget-short"),
    APUT(0x4b, "aput"),
    APUT_WIDE(0x4c, "aput-wide"),
    APUT_OBJECT(0x4d, "aput-object"),
    APUT_BOOLEAN(0x4e, "aput-boolean"),
    APUT_BYTE(0x4f, "aput-byte"),
    APUT_CHAR(0x50, "aput-char"),
    APUT_SHORT(0x51, "aput-short"),
    IGET(0x52, "iget"),
    IGET_WIDE(0x53, "iget-wide"),
    IGET_OBJECT(0x54, "iget-object"),
    IGET_BOOLEAN(0x55, "iget-boolean"),
    IGET_BYTE(0x56, "iget-byte"),
    IGET_CHAR(0x57, "iget-char"),
    IGET_SHORT(0x58, "iget-short"),
    IPUT(0x59, "iput"),
    IPUT_WIDE(0x5a, "iput-wide"),
    IPUT_OBJECT(0x5b, "iput-object"),
    IPUT_BOOLEAN(0x5c, "iput-boolean"),
    IPUT_BYTE(0x5d, "iput-byte"),
    IPUT_CHAR(0x5e, "iput-char"),
    IPUT_SHORT(0x5f, "iput-short"),
    SGET(0x60, "sget"),
    SGET_WIDE(0x61, "sget-wide"),
    SGET_OBJECT(0x62, "sget-object"),
    SGET_BOOLEAN(0x63, "sget-boolean"),
    SGET_BYTE(0x64, "sget-byte"),
    SGET_CHAR(0x65, "sget-char"),
    SGET_SHORT(0x66, "sget-short"),
    SPUT(0x67, "sput"),
    SPUT_WIDE(0x68, "sput-wide"),
    SPUT_OBJECT(0x69, "sput-object"),
    SPUT_BOOLEAN(0x6a, "sput-boolean"),
    SPUT_BYTE(0x6b, "sput-byte"),
    SPUT_CHAR(0x6c, "sput-char"),
    SPUT_SHORT(0x6d, "sput-short"),
    INVOKE_VIRTUAL(0x6e, "invoke-virtual"),
    INVOKE_SUPER(0x6f, "invoke-super"),
    INVOKE_DIRECT(0x70, "invoke-direct"),
    INVOKE_STATIC(0x71, "invoke-static"),
    INVOKE_INTERFACE(0x72, "invoke-interface"),
    INVOKE_VIRTUAL_RANGE(0x74, "invoke-virtual/range"),
    INVOKE_SUPER_RANGE(0x75, "invoke-super/range"),
    INVOKE_DIRECT_RANGE(0x76, "invoke-direct/range"),
    INVOKE_STATIC_RANGE(0x77, "invoke-static/range"),
    INVOKE_INTERFACE_RANGE(0x78, "invoke-interface/range"),
    NEG_INT(0x7b, "neg-int"),
    NOT_INT(0x7c, "not-int"),
    NEG_LONG(0x7d, "neg-long"),
    NOT_LONG(0x7e, "not-long"),
    NEG_FLOAT(0x7f, "neg-float"),
    NEG_DOUBLE(0x80, "neg-double"),
    INT_TO_LONG(0x81, "int-to-long"),
    INT_TO_FLOAT(0x82, "int-to-float"),
    INT_TO_DOUBLE(0x83, "int-to-double"),
    LONG_TO_INT(0x84, "long-to-int"),
    LONG_TO_FLOAT(0x85, "long-to-float"),
    LONG_TO_DOUBLE(0x86, "long-to-double"),
    FLOAT_TO_INT(0x87, "float-to-int"),
    FLOAT_TO_LONG(0x88, "float-to-long"),
    FLOAT_TO_DOUBLE(0x89, "float-to-double"),
    DOUBLE_TO_INT(0x8a, "double-to-int"),
    DOUBLE_TO_LONG(0x8b, "double-to-long"),
    DOUBLE_TO_FLOAT(0x8c, "double-to-float"),
    INT_TO_BYTE(0x8d, "int-to-byte"),
    INT_TO_CHAR(0x8e, "int-to-char"),
    INT_TO_SHORT(0x8f, "int-to-short"),
    ADD_INT(0x90, "add-int"),
    SUB_INT(0x91, "sub-int"),
    MUL_INT(0x92, "mul-int"),
    DIV_INT(0x93, "div-int"),
    REM_INT(0x94, "rem-int"),
    AND_INT(0x95, "and-int"),
    OR_INT(0x96, "or-int"),
    XOR_INT(0x97, "xor-int"),
    SHL_INT(0x98, "shl-int"),
    SHR_INT(0x99, "shr-int"),
    USHR_INT(0x9a, "ushr-int"),
    ADD_LONG(0x9b, "add-long"),
    SUB_LONG(0x9c, "sub-long"),
    MUL_LONG(0x9d, "mul-long"),
    DIV_LONG(0x9e, "div-long"),
    REM_LONG(0x9f, "rem-long"),
    AND_LONG(0xa0, "and-long"),
    OR_LONG(0xa1, "or-long"),
    XOR_LONG(0xa2, "xor-long"),
    SHL_LONG(0xa3, "shl-long"),
    SHR_LONG(0xa4, "shr-long"),
    USHR_LONG(0xa5, "ushr-long"),
    ADD_FLOAT(0xa6, "add-float"),
    SUB_FLOAT(0xa7, "sub-float"),
    MUL_FLOAT(0xa8, "mul-float"),
    DIV_FLOAT(0xa9, "div-float"),
    REM_FLOAT(0xaa, "rem-float"),
    ADD_DOUBLE(0xab, "add-double"),
    SUB_DOUBLE(0xac, "sub-double"),
    MUL_DOUBLE(0xad, "mul-double"),
    DIV_DOUBLE(0xae, "div-double"),
    REM_DOUBLE(0xaf, "rem-double"),
    ADD_INT_2ADDR(0xb0, "add-int/2addr"),
    SUB_INT_2ADDR(0xb1, "sub-int/2addr"),
    MUL_INT_2ADDR(0xb2, "mul-int/2addr"),
    DIV_INT_2ADDR(0xb3, "div-int/2addr"),
    REM_INT_2ADDR(0xb4, "rem-int/2addr"),
    AND_INT_2ADDR(0xb5, "and-int/2addr"),
    OR_INT_2ADDR(0xb6, "or-int/2addr"),
    XOR_INT_2ADDR(0xb7, "xor-int/2addr"),
    SHL_INT_2ADDR(0xb8, "shl-int/2addr"),
    SHR_INT_2ADDR(0xb9, "shr-int/2addr"),
    USHR_INT_2ADDR(0xba, "ushr-int/2addr"),
    ADD_LONG_2ADDR(0xbb, "add-long/2addr"),
    SUB_LONG_2ADDR(0xbc, "sub-long/2addr"),
    MUL_LONG_2ADDR(0xbd, "mul-long/2addr"),
    DIV_LONG_2ADDR(0xbe, "div-long/2addr"),
    REM_LONG_2ADDR(0xbf, "rem-long/2addr"),
    AND_LONG_2ADDR(0xc0, "and-long/2addr"),
    OR_LONG_2ADDR(0xc1, "or-long/2addr"),
    XOR_LONG_2ADDR(0xc2, "xor-long/2addr"),
    SHL_LONG_2ADDR(0xc3, "shl-long/2addr"),
    SHR_LONG_2ADDR(0xc4, "shr-long/2addr"),
    USHR_LONG_2ADDR(0xc5, "ushr-long/2addr"),
    ADD_FLOAT_2ADDR(0xc6, "add-float/2addr"),
    SUB_FLOAT_2ADDR(0xc7, "sub-float/2addr"),
    MUL_FLOAT_2ADDR(0xc8, "mul-float/2addr"),
    DIV_FLOAT_2ADDR(0xc9, "div-float/2addr"),
    REM_FLOAT_2ADDR(0xca, "rem-float/2addr"),
    ADD_DOUBLE_2ADDR(0xcb, "add-double/2addr"),
    SUB_DOUBLE_2ADDR(0xcc, "sub-double/2addr"),
    MUL_DOUBLE_2ADDR(0xcd, "mul-double/2addr"),
    DIV_DOUBLE_2ADDR(0xce, "div-double/2addr"),
    REM_DOUBLE_2ADDR(0xcf, "rem-double/2addr"),
    ADD_INT_LIT16(0xd0, "add-int/lit16"),
    RSUB_INT(0xd1, "rsub-int"),
    MUL_INT_LIT16(0xd2, "mul-int/lit16"),
    DIV_INT_LIT16(0xd3, "div-int/lit16"),
    REM_INT_LIT16(0xd4, "rem-int/lit16"),
    AND_INT_LIT16(0xd5, "and-int/lit16"),
    OR_INT_LIT16(0xd6, "or-int/lit16"),
    XOR_INT_LIT16(0xd7, "xor-int/lit16"),
    ADD_INT_LIT8(0xd8, "add-int/lit8"),
    RSUB_INT_LIT8(0xd9, "rsub-int/lit8"),
    MUL_INT_LIT8(0xda, "mul-int/lit8"),
    DIV_INT_LIT8(0xdb, "div-int/lit8"),
    REM_INT_LIT8(0xdc, "rem-int/lit8"),
    AND_INT_LIT8(0xdd, "and-int/lit8"),
    OR_INT_LIT8(0xde, "or-int/lit8"),
    XOR_INT_LIT8(0xdf, "xor-int/lit8"),
    SHL_INT_LIT8(0xe0, "shl-int/lit8"),
    SHR_INT_LIT8(0xe1, "shr-int/lit8"),
    USHR_INT_LIT8(0xe2, "ushr-int/lit8"),
    ;


    //if the instruction can throw an exception
    public static final int CAN_THROW = 0x1;
    //if the instruction is an odex only instruction
    public static final int ODEX_ONLY = 0x2;
    //if execution can continue to the next instruction
    public static final int CAN_CONTINUE = 0x4;
    //if the instruction sets the "hidden" result register
    public static final int SETS_RESULT = 0x8;
    //if the instruction sets the value of it's first register
    public static final int SETS_REGISTER = 0x10;
    //if the instruction sets the value of it's first register to a wide type
    public static final int SETS_WIDE_REGISTER = 0x20;
    //if the instruction is an iget-quick/iput-quick instruction
    public static final int QUICK_FIELD_ACCESSOR = 0x40;
    //if the instruction is a *get-volatile/*put-volatile instruction
    public static final int VOLATILE_FIELD_ACCESSOR = 0x80;
    //if the instruction is a static sget-*/sput-*instruction
    public static final int STATIC_FIELD_ACCESSOR = 0x100;
    //if the instruction is a jumbo instruction
    public static final int JUMBO_OPCODE = 0x200;
    //if the instruction can initialize an uninitialized object reference
    public static final int CAN_INITIALIZE_REFERENCE = 0x400;

    private static final int ALL_APIS = 0xFFFF0000;

    private static int minApi(int api) {
        return 0xFFFF0000 | (api & 0xFFFF);
    }

    private static int maxApi(int api) {
        return api << 16;
    }

    public final int value;
    public final String name;

    Opcode(int opcodeValue, String opcodeName) {
        this.name = opcodeName;
        this.value = opcodeValue;
    }

    public int getValue() {
        return value;
    }
}